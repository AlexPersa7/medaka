Medaka Examples
===============

Medaka demonstrates a framework for error correcting sequencing data,
particularly aimed at nanopore sequencing. Tools are provided for both training
and inference. The code exploits the `keras <https://keras.io>`_ deep learning
library.

Tools to enable the creation of draft assembies can be found in a sister
project `pomoxis <https://github.com/nanoporetech/pomoxis>`_.

A simple method presented to inspire further ideas is to align input sequences
and a truth sequence to a common baseline (e.g. reads and a reference to a
draft assembly), and extract 'feature vectors' for input into a neural network
classifier.

The currently implemented neural networks are limited in their ability to
correct errors: to predict an output base from a window of oriented base
features. They make no use of primary signal data from nanopore experiments,
as for instance performed by `nanopolish <https://github.com/jts/nanopolish>`_.
Future versions will implement correction schemes working directly from signal
data of multiple reads. For more details see :ref:`FutureDirections`.


Sequence correction
-------------------

`medaka_correct` uses a neural network error model to fix errors in input sequences.

.. code-block:: bash

    usage: medaka_correct.py [-h] [--threads THREADS] bam model

    Take an alignment of reads to a reference sequence and produce a corrected
    reference sequence.

    positional arguments:
      bam                alignment of reads to reference
      model              model .h5 filepath

    optional arguments:
      -h, --help         show this help message and exit
      --threads THREADS  number of processes (default: 1)


Neural network training
-----------------------

Training an error model is a two-stage process.

Generate a training data HDF5 file using `medaka_prepare`.

.. code-block:: bash

    usage: medaka_prepare.py [-h] [--threads THREADS]
                  truth_to_ref reads_to_ref output_name

    Generate training data from bam files.

    positional arguments:
      truth_to_ref       bam file with true sequence aligned to reference.
      reads_to_ref       bam file with reads aligned to reference.
      output_name        name for output dataset.
    
    optional arguments:
      -h, --help         show this help message and exit
      --threads THREADS  number of processes (default: 1)

Then supply the training data file to `medaka_train`.

.. code-block:: bash

    usage: medaka_train [-h] [--out_prefix OUT_PREFIX] [--epochs EPOCHS]
                        [--window_size WINDOW_SIZE] [--batch_size BATCH_SIZE]
                        [--data_pp DATA_PP] [--tvt_ratio train validate test]
                        [--threads THREADS]
                        datafile
    
    Train model using preprocessed training data.
    
    positional arguments:
      datafile              .h5 generated by medaka_prepare
    
    optional arguments:
      -h, --help            show this help message and exit
      --out_prefix OUT_PREFIX
                            name for outputs. (default: )
      --epochs EPOCHS       number of training epochs. (default: 10)
      --window_size WINDOW_SIZE
                            width of pileup window fed to trainer. (default: 3)
      --batch_size BATCH_SIZE
                            number of training samples per batch. (default: 256)
      --data_pp DATA_PP     proportion of data to process (from start). (default:
                            1.0)
      --tvt_ratio train validate test
                            select train:validate:test ratio. (default: [64, 16,
                            20])
      --threads THREADS     number of concurrent training threads (default: 1)
